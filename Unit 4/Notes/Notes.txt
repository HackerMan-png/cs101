Flow Control
    The Comparers
        We already went over these but the 3 ways to compare things are:
        ==
            Checks the 2 values after converting everything to strings
        ===
            Checks the two values without converting
        Object.is()
            Checks the two values without handling + or - or NaN
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Comparisons
        When you compare things you will always get either true or false
        You need to tell the computer what the 2 things are that need to be compared and then how to compare them.
        Ex. alert(2 == 2) // true
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Number Comparisons
        This is pretty obvious...
        You compare numbers just like math and it's either true or false just like math
        Ex. alert(5 > 5) //false
            alert(4 <= 5) //true
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    String Comparisons
        These are checked left to right and they are judged in alphabetical order.
        "a" is less than "b" since b is later in the alphabet
        "West" is less than "Went"
            "w" is equal
            "e" is equal
            "s" is less than "n"
        When comparing strings the unicode is checked and seen to be greater or less not the actual letters.
        When creating a unicode dictionary the uppercase were letters added first. Therefore:
            "a" is greater than "A"
        If you don't want to check that closely you can use the .toLowerCase()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Conditional Branching
        The "if" statement
            This "if" statement is used to check a conditional statement
            It will either be "true" and proceed or "false" and skip
            The conditional is placed in the parameters of the if statement
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        The Many Forms of "if"
            The standard form of "if" is as follows:
            if(conditional == true){
                console.log('it was true');
            }
            The "if" statement will always try to do a boolean conversion before checking.
            For example: a string is always true unless it's empty. This is called being "falsy"
            Other examples include:
                ""
                Undefined
                NaN
                Null
                0
            You can also place a value into the conditional rather than a comparison and it will still work if the Boolean conversion outputs a true.
            if(true)console.log('works');
            if(0)console.log('does not work');
            
            let check = "false";
            if(check) console.log('this works too');

            Ternary Operator
                You thought we were finished? YOU FOOL!
                If you want to create a small "if else" conditional then you can use the conditional operator "?"
                This is it for real this time.
                    let result = (condition) ? value1 : value2;
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        The "else" condition
            You can define something "else" to happen in case the value is false
            This will happen no matter what if the condition is false so it doesn't require a condition. It shares the other half of the if conditional.
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        "else if" - Last one
            If you want to have several cascading checks through if statements you can use "else if" and create a second condition to check before failing.
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Multiple "?"s - DON'T DO THIS
            If you want to use the conditional operator as an else if then you can use multiple "?"s
            let letterGrade = (grade > 90) ? 'A' :
                (grade > 80) ? 'B' :
                (grade > 70) ? 'C' :
                (grade > 60) ? 'D' :
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Switch Conditions
            If you are creating something like on the last slide with tons of checks then here is a better way of checking called a switch case
            Here you enter a parameter and then list cases for what to expect
            The last one should be "default" as a catch all in case none of the cases are met
            Last, it will run through all values unless you use "break"

            Example:
            switch (param) {
                case "walk"
                    //your code here
                    break;
                case "sleep";
                    //your code here
                case "dream"
                    //your code here
                    break;
                default:
                    //your code here
            }
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logical Operators
    Logic Operators
        These are used to check multiple operands at once.
        If you didn't use these you would have to create an if statement inside of an if statement to check that both are true before you output
        Now you can check 2 or more operators at once
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Or operator - || 
        That is the vertical line above the enter key
        Or is the logical operator that will return  if 1 or more of these values are true.
        ORs will go through every condition in parameters and stop as soon as they reach any truthy values.
        Example:
            if(shirt == "blue || shirt == "red" || shirt == "green" || shirt == "pink"){
                alert("Lookin' good)
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    And Operator - &&
        The AND operator uses 2 ampersands (&&)
        It works similar to the OR operator but requires that all the checks are truthy
        The computer will go through every condition in the parameter and exit the conditional as soon as a falsy operand appears, if none appear then it will continue.
        Example:
            let tvOn = true;
            let radioOn = true;
            let computerOn = true;
            if(tvOn && radioOn && computerOn){
                alert("you have too much on... don't waste power")
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NOT Operator - !
        The not operator is just an exclamation point and can be put in front an equal sign or an operand
        All this does is take the truthy or falsy value of the operand and turns the opposite value
        Example:
            let mapMissing = false
            let noDirections = true
            let gas = 10
            if(gas != 0 && (!mapMissing || !noDirections)){
                alert{"The road trip is on!"};
            }else{
                alert("You're missing something")
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Nullish Coalescing Operator
        This is the newest operator added to the JS language and doesn't work on browsers that aren't updated.
        This operator will check to make sure that the first value is not null or undefined, if so then you can define a default value.
        this is called a "nullish" value
        Example:
            let value = undefined;
            console.log(value ?? 'this is not defined')
        How it used to be
        Before the other operator they would still need to check to make sure that the input had a value by using the following
            if(value !== null && value != undefined){
                return value;
            } else{
                return "This is undefined";
            }
        Now we can just say
            console.log(value ?? "This is not defined")
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Chaining the Operators
        You can check several things in a row and it will return the first non null value.
        This is still too new to be tested in node.
        Example:
            let a = null;
            let b = undefined;
            let c = "";
            let d = "This is the last thing";

            console.log(a ?? b ?? c ?? d); // ""
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Using || instead
        You can istead use || but the difference is that any "falsy" value will be skipped and not  just nullish.
        So it will skip "", 0's and false
        Example:
            let a = null;
            let b = undefined;
            let c = "";
            let d = "This is the last thing";

            console.log(a || b || c || d) // "this is the last thing"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Loops
    The for loop
        A for loop is made up of 3 parameters, separated by semicolons
            What value are you starting your loop at
            What condition needs to be met for the loop to end
            How much should your value change by every time a loop ends
        For(starting_Value; end_Condition; increment){
            //Code that will be looped
        }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The loop order
        The order of a loop is:
            Check the condition, if true continue, if false end
            Run the code in the body
            Increase by the increment (called step) and repeat
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Basic for Loop
        Normally you will start with 1 as a starting value
        This initial value needs to be stored in a variable since it will be changing throughout the duration of the code.
        In order to do this we create a new variable, usually named i (for increment) and set it equal to 1
        Example: for(let i = 1;

        Then you need to place an end condition, these will vary a lot depending on what you want to do but for now we will create one that will happen 2 times
        As long as i is less than 3 it will run the loop
        Example: for(let i = 1; i < 3

        These go up by a set amount every time.
        The most common way to go up 1 at a time and the best way to do that is with the incremental operator, i++
        Example: for(let i =1; i < 3; i++){
            //code to repeat here
        }

        The last thing you do is add a bit of code to run in the body that will happen every time the loop executes
        Normally this will involve the i value since it will be changing so let's use it as an example
        Example:
            for(let i = 0; i < 3; i++){
                console.log(`this has happened ${i} times`)
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Skipping Parts of Your Loop
        If you already have the starting value initialized before hand you do not have to declare it in your loop
        This isn't a normal thing to do and can lead to some major confusion if your variables are not correctly named

        You can also skip the step potion if you are stepping it inside of the loop.
        I would not recommend doing this either as it can be very confusing 

        There are better ways of doing this and you really shouldn't anyway but if you want to be a ninja i figured i would mention this.
        You can skip every part of the parameters and it will repeat forever.
            For(;;) {
                //repeats without limits
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    While Loop
        A while loop is a little different, it will keep running until the condition returns falsy.
        This is very similar to a for loop but the difference comes with the parameters.
        You ONLY declare the condition not the start or the step.
        Example:
            while (condition) {
                //code
                //called "body"
            }
        Even though you don't declare the initial and the step you normally need to use them anyways.
        This is a standard while loop 
            let i = 0
            while (i < 3 ) { // shows 0,then 1, then 2
                console.log(i);
                i++;
            } 
        
        Something to consider...
            Since while loops end on falsy values you can end up on a 0 without any extra code.
            Example:
            let i = 3;
            while (i) {
                // when i becomes 0, the condition becomes falsy, and the loop stops
                alert(i);
                i--;
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Do While Loop
        A while loop will check the condition to make sure it works and then move on to the body.
        Therefore there is a chance that the condition fails immediately and the loop never runs.
        To avoid this the do... while loop was created. This acts just like a while loop but it checks the condition at the end meaning it will always run at least once.

        This is written and used very similarly to a while loop
            let i = 0
            do{
                console.log(i);
                i++;
            } while (i < 3)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Breaking the Loop
        You can stop the loop at any point if you'd like if you use the break; statement.
        Let's create an example together that uses this and finds the sum, amount of grades, average, and letter grade for a student.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Labeling You Loops
        You are able to name your loops by giving them labels. Just a name with a colon "main:"
        This is incredibly important when creating a complicated system of nested loopsThis can only affect loops in your nest. It can not move to any loop.
    
        Example:
        outer:
        for(let i = 0; i < 3; i++){
            for( let j = 0; j < 3; j++){
                let input = prompt(`Value at coords (${i},${j})`);

                // if an empty string or canceled, then break out of both loops
                if (!input) break outer; //(*)

                //do something with the value
            }
        }
        alert('Done!')
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Switch Statement
        We briefly mentioned this earlier but now we are going to teach this a little deeper now.
        The switch statement is used to replace multiple if checks

        No Breaks on the Switch Bus
            When you do not add breaks the switch case will continue without any checks and complete ALL the code after the first true.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Arrays
    Introduction to Array Objects
        Arrays allow you to create 1 object that can hold many values in a row.
        These values are numbered to keep track of them starting with the number 0
        These are so important because they come with a collection of methods to modify the order and the values stored in the collection.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Creating Arrays
        There are 2 ways to initialize a new array but one is much more common.
        let array = new Array();

        let array = []; // use this one

        The first one is left over from java, they require you to create a new array object.
        The second way is faster and used in javascript.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Adding Values to Arrays
        An  array can be added to by using square brackets and commas

        array = ["red", "orange", "yellow", "green"];

        These values are referenced using the array name and their position in the array
        array[0]; // is red;
        array[3]; // is green;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Assigning Values
        At any point you are able to define a specific value inside the array

        array = ["red", "orange", "yellow", "green"];

        array[2] // is yellow
        array[2] = "pink";
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Checking the Array
        We already saw that you can reference the array by using the index but you can also show the entire array as well.

        console.log(array);
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Array.Length
        One of the most common ways to use arrays is with loops. Normally this includes going through every value in your array and modifying it.
        To find out how long your array im you use the method array.length
        Example:
            array = ["red", "orange", "yellow", "green"];
            console.log(array.length); //returns the value 4

        Array.length is a value 1 greater than the highest index. This is always true without any exceptions
        A fun side effect of this is that you can actually overwrite the array.length and it will remove overflow items.
        Example:
            array = ["red", "orange", "yellow", "green"];
            array.length = 2; // "red", "orange"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Array Methods
        Array.push()
            This will add an item to the end of your array
        Array.pop()
            Take an element away from the end of the array
        Array.shift()
            Takes an element to the front of the array
        Array.unshift()
            Adds an element to the front of the array.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Efficient Code
        When working with arrays, or anything that happens over and over, it is always import to consider efficiency
        With arrays array.shift() is EXTREMELY inefficient and gets slower the more items you have in the array.
        For this reason you should always try to use push and pop as much as possible, only use shift if it's unavoidable.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Looping Through the Array
        There are a few ways to loop through every item in an array

        for(let i = 0; i < array.length; i++)
            This is the standard way of doing it. It is effective code and gives great understanding to others.
        for(let item of array){}
            This is the modern way of handling it and is an accepted way of handling looping
        for(let i in array){}
            Don't use this. it only uses numerical values.

        While doing this you will use the i as the index value which will allow you to access every single value
        For example if you wanted to increase all of the value in array by 3 times
        Example:
            for(let i = 0; i < array.length; i++){
                array[i] *= 3;
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The .split() method
        The split method will take any string input you have and break it up every time it sees the string in the parameters and create an array using all of the created parts
        Example:
            let string = "this is sparta"
            string = string.split('s');
            console.log(string)
            "thi's' i's' 's'parta"
            ['thi', 'i', ' ', 'parta']
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Functions
    Introduction to a Function
        A function is a small bitof code that can be called and ran anypoint in your code.
        If you are going to use a bit of code all over your code then you can just create that code in a function and cal lthe function
        They also accept parameters and will always return exactly 1 value
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Layout of a Function
        There are 4 parts of a function that you need to make.
            The keyword function 
            The name of the function
            THe parameters of the function
            Lastly the body of the function that holds the code
        function functionName (parameters{
            //function body
        } 
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Calling a Function
        Once you have created your function youcan call them anytime with any parameter that you have created.
        You do this by calling their name (just like you would a person in real life)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Parameters
        Unlike other code you can use a variable that is yet to be declared by passing it through the parameters.
        This lets you accept many different inputs that can be used to change the outcome of your function.
        Example:
            function showMessage(from, text) {
                //arguments: from, text
                    alert(from + ': ' + text)
            }
            showMessage('Ann', 'Hello!'); //Ann; Hello!
            
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    onClick
        The easiest way to incorporate this into your website is using the onClick event listener.
        This will allow you to call a function in the HTML to run some code on a button click.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Holy Trinity
        Now spend a little time modifying that button.
        Make it rounded, orange, larger font with bold letters, centered on the page vertically and horizontally, and make the button larger to fit it all.
        You have officially combined HTML, CSS, and JS. You are the most basic version of a web developer there is, buy you are a web developer now.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Local Variables
        If a variable is called in a function then the variable is called a local variable and can only be accessed inside that function.
        This is kind of like how we use the i variable for every loop without conflict
        We are able to use the same variable over and over in the function.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Global Variables
        A global variable exists outsidee of the function and can be accessed and modified by all functions.
        If you try to call the samenamed variable in a function it will use the local version and not overwrite the global version
        There are reasons to use both local and global variables so its really up to the situation for which is correct.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default Values
    When creating your parameters you can set them equal to something to make sure there is a default value. Then if nothing is entered in the parameters they will still have a value to input.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Returning a Value
        You can make a function assign a value as well
        This is used using the "return" keyword
        There can only be one return value and as soon as it happens the function will end. No matter what.
        The best part of returning a value is the ability to directly assign that value to a variable.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Proper Naming for Functions
        Since functions do something and serve a purpose you need to name them using proper verbs
            "getFunction"
                returns a value
            "calcFunction"
                calculate something
            "createFunctions
                creates something
            "checkFunction"
                Checks something and returns a true or false
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Commenting!
        Functions are usually very short and do A thing, only 1 thing.
        Because of this, there are usually lots of functions that are created and used in longer code and therefore your functions MUST HAVE COMMENTS
        It may also be better to split your functions into several smaller functions.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Function Expressions
        A functionn expression is when you create your function inside of a "variable" of sorts
        Below is an example of both:
            function sayHi(name, text){
                console.log(sayHi(name, text));
            }

            let sayHi = function(name, text){
                console.log(sayHi(name, text));
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Expression vs. Declaration
        Declarations (the first way we learned) has something called "hoisting", which means that it can be used before its created.
        Example:
            //this works
            doStuff()
            function doStuff(){

            }
        Expressions don’t have hoisting but they can be created and forgotten after use, saving your computer some brain power
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    When to use Each
        This really depends on the code you want to run.
        Function declarations are used if you want something usable in your entire code.
        Function expressions are used when you want something smaller and to be used only where the function is available.
        Remember to keep your code clean and efficient
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arrow Functions
        Arrow functions are a nicer way of writing function expressions
        These are nor more or less efficient, they are just a more compact way of coding a function
        PLEASE USE THE WAY THAT MAKES YOU MORE COMFORTABLE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Basic Arrow Function
        When creating the arrow function you can leave out the keyword function
        The => tells the code what is returned from the function
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Use Strict
        Every js file should start with the phrase
            "use strict";
        This is make sure that the js code uses the modern versions for behavior and not the outdated older versions, called "compatibility" version;
        This won't break the code but if you ever want to turn js intoan OOP instead of OBP language, this is how you do it.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The DOM
    Introduction to DOM
        The DOM is the Document Object Model and it is how we scan the HTML for elements, IDs, Classes, and more to modify with JS.
        The HTML that the script tag is used in is considered the "document" hance the name document object model.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Input and Output - DOM
        The best way to communicate with the document (HTML file) is by using IDs.
        We have been using classes to modify the styles of all of the different elements but now we can use the IDs to interact with the JS
        
        An inputcan be gotten from the HTML using the input boxes that we learned about and then using the .value method
        This is a great way to get content from the user and then using it in the javascript

        To update an existing element you can use the .textContent
        This will change any of the text on the HTML so that you can display new information.
        
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Modifying the styles  
        CSS is a little more tempermental with the js changes, the best way to modify the styles of the HTML is to add and remove classes that you are already created in the CSS.
        We do this is looking at the classlist and modifying it.
        Example:
            document.getElementById(idName).classList
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    classList
        The classList method will create an array that you can use to see every class that is attached to the element that you use it on.
        Once you have the list of classes you cando a few things like add more, remove some, or just check if a class is present at all.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    classList Methods
        .add(className);
            Allows you to add a new class to the element's list
        .contains(className);
            Allows you to check to see if the element has a certain class
        .remove(className);
            Removes a class from the list.
        .toggle(className)
            Turns a class on/off without removing it.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    