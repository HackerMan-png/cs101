The Comparers
    We already went over these but the 3 ways to compare things are:
    ==
        Checks the 2 values after converting everything to strings
    ===
        Checks the two values without converting
    Object.is()
        Checks the two values without handling + or - or NaN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Comparisions
    When you compare things you will always get either true or false
    You need to tell the computer what the 2 things are that need to be compared and then how to compare them.
    Ex. alert(2 = 2) // true
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Number Comparisions
    Thi is pretty obvious...
    You compare numbers just like math and it's either true or false just like math
    Ex. alert(5 > 5) //false
        alert(4 <= 5) //true
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
String Comparisions
    These are checked left to right and they are judged in alphabetical order.
    "a" is less than "b" since b is later in the alphabet
    "West" is less than "Went"
        "w" is equal
        "e" is equal
        "s" is less than "n"
    When comparing strings the unicode is checked and seen to be greater or less not th actual letters.
    When creating unicode dictionary the uppercase were letters added first. Therefore:
        "a" is greater than "A"
    If you dont want to check that closely you can use the .toLowerCase()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Conditional Branching
    The "if" statement
        This "if" statement is used to check a conditional statement
        It will either be "true" and proceed or "false" and skip
        The conditional is palced in the parameters of the if statement
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Many Forms of "if"
        The standard form of "if" is as folows:
        if(conditional == true){
            console.log('it was true');
        }
        The "if" statement will always try to do a bolean conversion before checking.
        For example: a string is always true unless it's empty. This is called being "falsy"
        Other examples inclide:
            ""
            Underfined
            NaN
            Null
            0
        You can also palce a value into the conditional rather than a compariosn and it will still work if the Boolean conversion outputs a true.
        if(true)console.log('works');
        if(0)console.log('doesnt work');
        
        let check = "false";
        if(check) console.log('this works too');

        Ternary Operator
            You thought we were finished? YOU FOOL!
            If you want to create a small "if else" conditional then you can use the conditional operator "?"
            This is it for real this time.
                let result = (condition) ? value1 : value2;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The "else" condition
        You can define something "else" to happen in case the value is false
        This will happen no matter what if the condition is flase so it doesnt require a condition. It shares the other half of the if conditional.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "else if" - Last one
        If you want to have several cascading checks through if statements you can use "else if" and create a second condition to check before failing.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Multiple "?"s - DONT DO THIS
        If you want to use the conditional operator as an else if then you can use multiple "?"s
        let letterGrade = (grade > 90) ? 'A' :
            (grade > 80) ? 'B' :
            (grade > 70) ? 'C' :
            (grade > 60) ? 'D' :
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Switch Conditions
        If you are creating something like on the last slide with tons of checks then ere is a better way of checking called a switch case
        Here you enter a parameter and then list cases for what to expect
        The last one should be "default" as a catch all in case none of the cases are met
        Last, it will run through all values unless you use "break"

        Example:
        switch (param) {
            case "walk"
                //your code here
                break;
            case "sleep";
                //your code here
            case "dream"
                //your code here
                break;
            default:
                //your code here
        }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logical Operators
    Logic Operators
        These are used to check multiple operands at once.
        If you didn't use these you would have to create an if statement inside of an if statement to check that both are true before you output
        Now you can check 2 or more operators at once
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Or operator - || 
        That is the vertical line above the enter key
        Or is the logical operator that will return  if 1 or more of these values are true.
        ORs will go through every condition in parameters and stop as soon as they reach any truthy values.
        Example:
            if(shirt == "blue || shirt == "red" || shirt == "green" || shirt == "pink"){
                alert("Lookin' good)
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    And Operator - &&
        The AND operator uses 2 ampersands (&&)
        It works similar to the OR operator but requires that all the checks are truthy
        The computer will go through every condition in the parameter and exit the conditional as soon as a falsy operand appears, if none appear then it will continue.
        Example:
            let tvOn = true;
            let radioOn = true;
            let computerOn = true;
            if(tvOn && radioOn && computerOn){
                alert("you have too much on... dont waste power")
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NOT Operator - !
        The not operator is just an exclamation point and can be put in front an equal sign or an operand
        All this does is take the truthy or falsy value of the operand and trurns the opposite value
        Example:
            let mapMissing = false
            let noDirections = true
            let gas = 10
            if(gas != 0 && (!mapMissing || !noDirections)){
                alert{"The road trip is on!"};
            }else{
                alert("You're missing something")
            }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
