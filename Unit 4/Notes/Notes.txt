The Comparers
    We already went over these but the 3 ways to compare things are:
    ==
        Checks the 2 values after converting everything to strings
    ===
        Checks the two values without converting
    Object.is()
        Checks the two values without handling + or - or NaN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Comparisions
    When you compare things you will always get either true or false
    You need to tell the computer what the 2 things are that need to be compared and then how to compare them.
    Ex. alert(2 = 2) // true
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Number Comparisions
    Thi is pretty obvious...
    You compare numbers just like math and it's either true or false just like math
    Ex. alert(5 > 5) //false
        alert(4 <= 5) //true
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
String Comparisions
    These are checked left to right and they are judged in alphabetical order.
    "a" is less than "b" since b is later in the alphabet
    "West" is less than "Went"
        "w" is equal
        "e" is equal
        "s" is less than "n"
    When comparing strings the unicode is checked and seen to be greater or less not th actual letters.
    When creating unicode dictionary the uppercase were letters added first. Therefore:
        "a" is greater than "A"
    If you dont want to check that closely you can use the .toLowerCase()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Conditional Branching
    The "if" statement
        This "if" statement is used to check a conditional statement
        It will either be "true" and proceed or "false" and skip
        The conditional is palced in the parameters of the if statement
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Many Forms of "if"
        The standard form of "if" is as folows:
        if(conditional == true){
            console.log('it was true');
        }
        The "if" statement will always try to do a bolean conversion before checking.
        For example: a string is always true unless it's empty. This is called being "falsy"
        Other examples inclide:
            ""
            Underfined
            NaN
            Null
            0
        You can also palce a value into the conditional rather than a compariosn and it will still work if the Boolean conversion outputs a true.
        if(true)console.log('works');
        if(0)console.log('doesnt work');
        
        let check = "false";
        if(check) console.log('this works too');

        Ternary Operator
            You thought we were finished? YOU FOOL!
            If you want to create a small "if else" conditional then you can use the conditional operator "?"
            This is it for real this time.
                let result = (condition) ? value1 : value2;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The "else" condition
        You can define something "else" to happen in case the value is false
        This will happen no matter what if the condition is flase so it doesnt require a condition. It shares the other half of the if conditional.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "else if" - Last one
        If you want to have several cascading checks through if statements you can use "else if" and create a second condition to check before failing.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Multiple "?"s - DONT DO THIS
        If you want to use the conditional operator as an else if then you can use multiple "?"s
        let letterGrade = (grade > 90) ? 'A' :
            (grade > 80) ? 'B' :
            (grade > 70) ? 'C' :
            (grade > 60) ? 'D' :
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Switch Conditions
        If you are creating something like on the last slide with tons of checks then ere is a better way of checking called a switch case
        Here you enter a parameter and then list cases for what to expect
        The last one should be "default" as a catch all in case none of the cases are met
        Last, it will run through all values unless you use "break"

        Example:
        switch (param) {
            case "walk"
                //your code here
                break;
            case "sleep";
                //your code here
            case "dream"
                //your code here
                break;
            default:
                //your code here
        }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Logical Operators
    Logic Operators
        These are used to check multiple operands at once.
        If you didn't use these you would have to create an if statement inside of an if statement to check that both are true before you output
        Now you can check 2 or more operators at once
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Or operator - || 
        That is the vertical line above the enter key
        Or is the logical operator that will return  if 1 or more of these values are true.
        ORs will go through every condition in parameters and stop as soon as they reach any truthy values.
        Example:
            if(shirt == "blue || shirt == "red" || shirt == "green" || shirt == "pink"){
                alert("Lookin' good)
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    And Operator - &&
        The AND operator uses 2 ampersands (&&)
        It works similar to the OR operator but requires that all the checks are truthy
        The computer will go through every condition in the parameter and exit the conditional as soon as a falsy operand appears, if none appear then it will continue.
        Example:
            let tvOn = true;
            let radioOn = true;
            let computerOn = true;
            if(tvOn && radioOn && computerOn){
                alert("you have too much on... dont waste power")
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NOT Operator - !
        The not operator is just an exclamation point and can be put in front an equal sign or an operand
        All this does is take the truthy or falsy value of the operand and trurns the opposite value
        Example:
            let mapMissing = false
            let noDirections = true
            let gas = 10
            if(gas != 0 && (!mapMissing || !noDirections)){
                alert{"The road trip is on!"};
            }else{
                alert("You're missing something")
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Nullish Coalescing Operator
        This is the newst eperator added to the JS language and doesnt work on browsers that aren't updated.
        This operator will check to make sure that the first value is not null or undefined, it if is then you can define a default value.
        this is called a "nullish" value
        Example:
            let value = undefined;
            console.log(value ?? 'this is not defined')
        How it used to be
        Before the other operator they would still need to check to make sure that the input had a balue by using the following
            if(value !== null && value != undefined){
                return value;
            } else{
                return "This is undefined";
            }
        Now we can just say
            console.log(value ?? "This is not defined")
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Chaining the Operators
        You can check several things in a row and it will return th first non nullish value.
        This is still too new to be tested in node.
        Example:
            let a = null;
            let b = undefined;
            let c = "";
            let d = "This is the last thing";

            console.log(a ?? b ?? c ?? d); // ""
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Using || instead
        You can istead use || but the difference is that any "falsy" value will be skipped and not  just nullish.
        So it will skip "", 0's and false
        Example:
            let a = null;
            let b = undefined;
            let c = "";
            let d = "This is the last thing";

            console.log(a || b || c || d) // "this is the last thing"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Loops
    The for loop
        A for loop is amde up of 3 parameters, seperated by semicolons
            What value are you starting your loop at
            What condition needs to be met for the loop to end
            How much should your value change by every time a loop ends
        For(starting_Value; end_Condition; increment){
            //Code that will be looped
        }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The loop order
        The order of a loop is:
            Check the condition, if true continue, if false end
            Run the code in the body
            Increase by the increment (called step) and repeat
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Basic for Loop
        Normally you will start with 1 as a starting value
        This initial value needs to be stored in a variable since it will be changing throughout the duration of the code.
        In order to do this we create a new variable, usually named i (for increment) and set it equal to 1
        Example: for(let i = 1;

        Then you need to place an end condition, these will vary a lot depending on what you want to do but for now we will create one that will happen 2 times
        As long as i is less than 3 it will run the loop
        Example: for(let i = 1; i < 3

        These go up by a set amount every time.
        The most common way to go up 1 at a time and the best way to do that is with the incremental operator, i++
        Example: for(let i =1; i < 3; i++){
            //code to repeat here
        }

        The last thing you do is add a bit of code to run in the bodythat will happen every time the loop executes
        Normally this will involve the i value since it will be changing so let's use it as an example
        Example:
            for(let i = 0; i < 3; i++){
                console.log(`this has happened ${i} times`)
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Skipping Parts of Your Loop
        If you already have the starting vlaue initialized before hand you do not have to declare it in your loop
        This isn't a normal thing to do and can lead to some major confusion if your variables are not correctly named

        You can also skip the step potion is if you are stepping it inside of the loop.
        I would not recomemend doing this eaither as it can be very confusing 

        There are better ways of doing this and you really shouldn't anyway but if you want to be a ninja i figured i would mention this.
        You can skip every part of the parameters an it will repeat forver.
            For(;;) {
                //repeats without limits
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    While Loop
        A while loop is a little different, it will keep running until the condtion returns falsy.
        This is very similar to a for loop but the difference comes with the parameters.
        You ONLY declare the condition not the start or the step.
        Example:
            while (condition) {
                //code
                //called "body"
            }
        Even though you dont declare the initial and the step you normally need to use them anyways.
        This is a stardard while loop 
            let i = 0
            while (i < 3 ) { // shows 0,then 1, then 2
                console.log(i);
                i++;
            } 
        
        Something to consider...
            Since while loops end on falsy values you can end up on a 0 without any extra code.
            Example:
            let i = 3;
            while (i) {
                // when i becomes 0, the condition becomes falsy, and the loop stops
                alert(i);
                i--;
            }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Do While Loop
        A while loop will check the condition to make sure it works and then move on to the body.
        Therefore there is a chance that the condition fails immediately and the loop never runs.
        To avoid this the do... while loop was created. This acts just like a while loop but it checks the condition at the end meaning it will always run at least once.

        This is written and used very similarly to a while loop
            let i = 0
            do{
                console.log(i);
                i++;
            } while (i < 3)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Breaking the Loop
        You can stop the loop at any point if you'd like if you use the break; statement.
        Let's create an example together that uses this and finds the sum, amount of grades, average, and letter grade for a student.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Labeling You Loops
        You are able to name your loops by giving them labels. Just a name with a colon "main:"
        This is incredibly important when creating a complicated system of nested loopsThis can only effect loops in your nest. It can not move to any loop.
    
        Example:
        outer:
        for(let i = 0; i < 3; i++){
            for( let j = 0; j < 3; j++){
                let input = prompt(`Value at coords (${i},${j})`);

                // if an empty string or canceld, then break out of both loops
                if (!input) break outer; //(*)

                //do something with the value
            }
        }
        alert('Done!')
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The Switch Statement
        We briefly mentioned this earlier but now we are going to teach this a little deeper now.
        The switch statement is used to replace multiple if checks

        No Breaks on the Switch Bus
            When you do not add breaks the switch case will continue without any checks and complete ALL the code after the first true.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

